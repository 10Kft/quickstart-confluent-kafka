{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "CloudFormation sub-template for Auto-scaling group deployment",
    "Parameters": {
        "BootDiskSize": {
            "ConstraintDescription": "Deployment supports 8 to 128 GB for boot volumes",
            "Default": "30",
            "Description": "Allocated EBS storage for boot disk",
            "MaxValue": "128",
            "MinValue": "8",
            "Type": "Number"
        },
        "ClusterInfoHandle": {
            "Description": "",
            "Type": "String"
        },
        "ClusterName": {
            "AllowedPattern": "([A-Za-z]{1}[0-9A-Za-z_-]*)",
            "ConstraintDescription": "The ClusterName value must be alphanumeric",
            "Default": "awsmk",
            "Description": "Confluent Cluster ID",
            "Type": "String"
        },
        "ConfluentEdition": {
            "AllowedValues": [
                "Confluent Platform",
                "Confluent Platform Enterprise"
            ],
            "Default": "Confluent Platform Enterprise",
            "Description": "Confluent Software Edition; you MUST authorize access to the proper AMI at https://aws.amazon.com/marketplace/search/results/ref=lbr_navgno_search_box?page=1&searchTerms=confluent",
            "Type": "String"
        },
        "ConfluentSecurity": {
            "AllowedValues": [
                "Disabled",
                "Enabled"
            ],
            "Default": "Disabled",
            "Description": "Enable strong authentication for cluster access",
            "Type": "String"
        },
        "ConfluentVersion": {
            "AllowedValues": [
                "3.2.0-SNAPSHOT",
                "3.1.2",
                "3.1.1"
            ],
            "ConstraintDescription": "Supported versions of Confluent Platform within AWS Marketplace",
            "Default": "3.1.2",
            "Description": "Confluent Software Version",
            "Type": "String"
        },
        "InstanceProfile": {
            "Description": "IAM Profile for the deployment",
            "Type": "String"
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair within the AWS account; all instances will launch with this KeyPair",
            "MinLength": "1",
            "Type": "String"
        },
        "LinuxOS": {
            "AllowedValues": [
                "CentOS-7.1",
                "Ubuntu-16.04",
                "AmazonLinux-2016.09"
            ],
            "ConstraintDescription": "Supported versions of Linux AMI's for Confluent deployments",
            "Default": "CentOS-7.1",
            "Description": "Operating system for cluster instances",
            "Type": "String"
        },
        "NodeDesignation": {
            "Description": "Tag for deployed instances",
            "Type": "String"
        },
        "NodeSecurityGroup": {
            "Default": "",
            "Description": "ID of the Member Security Group (e.g., sg-7f16e910)",
            "Type": "String"
        },
        "NodeSpotPrice": {
            "AllowedPattern": "([0-9]{1}[.]{1}[0-9]{2})",
            "ConstraintDescription": "Must be decimal numeric value",
            "Default": "0.00",
            "Description": "Spot Price to bid for requested instances (0.00 will result in using on-demand instances)",
            "Type": "String"
        },
        "NodeType": {
            "AllowedValues": [
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "i2.xlarge",
                "i2.2xlarge"
            ],
            "ConstraintDescription": "Must be a valid EC2 instance type.",
            "Default": "d2.xlarge",
            "Description": "Instance Type",
            "Type": "String"
        },
        "NumNodes": {
            "Default": "3",
            "Description": "Number of Nodes in Auto-scaling Group",
            "MaxValue": "9",
            "MinValue": "1",
            "Type": "Number"
        },
        "ParentStackName": {
            "Description": "Wrapper stack for this deployment",
            "Type": "String"
        },
        "PersistentStorage": {
            "ConstraintDescription": "No more than 1024 GB per device (4 TB per node).",
            "Default": "0",
            "Description": "Allocated EBS storage for each block device (in GB; 4 devs per node); 0 indicates ephemeral storage only",
            "MaxValue": "1024",
            "MinValue": "0",
            "Type": "Number"
        },
        "ScriptsURL": {
            "Description": "",
            "Type": "String"
        },
        "VpcSubnetId": {
            "Description": "ID of the VPC subnet for the deployment",
            "Type": "String"
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "AMZNLINUXHVM": "amzn-ami-hvm-2016.09.1.20170119-x86_64-gp2",
                "CENTOS7HVM": "CentOS Linux 7 x86_64 HVM EBS 1602-b7ee8a69-ee97-4a49-9e68-afaee216db2e-ami-d7e1d2bd.3",
                "US1604HVM": "ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20161214-d83d0782-cb94-46d7-8993-f4ce15d1a484-ami-e13739f6.3"
            },
            "ap-northeast-1": {
                "AMZNLINUXHVM": "ami-56d4ad31",
                "CENTOS7HVM": "ami-eec1c380",
                "US1604HVM": "ami-1c13787b"
            },
            "ap-northeast-2": {
                "AMZNLINUXHVM": "ami-dac312b4",
                "CENTOS7HVM": "ami-c74789a9",
                "US1604HVM": "ami-14a0767a"
            },
            "ap-south-1": {
                "AMZNLINUXHVM": "ami-f9daac96",
                "CENTOS7HVM": "ami-95cda6fa",
                "US1604HVM": "ami-19f78076"
            },
            "ap-southeast-1": {
                "AMZNLINUXHVM": "ami-dc9339bf",
                "CENTOS7HVM": "ami-f068a193",
                "US1604HVM": "ami-75ac0216"
            },
            "ap-southeast-2": {
                "AMZNLINUXHVM": "ami-1c47407f",
                "CENTOS7HVM": "ami-fedafc9d",
                "US1604HVM": "ami-bdc7fcde"
            },
            "ca-central-1": {
                "AMZNLINUXHVM": "ami-ebed508f",
                "CENTOS7HVM": "ami-af62d0cb",
                "US1604HVM": "ami-e72a9883"
            },
            "eu-central-1": {
                "AMZNLINUXHVM": "ami-af0fc0c0",
                "CENTOS7HVM": "ami-9bf712f4",
                "US1604HVM": "ami-232aea4c"
            },
            "eu-west-1": {
                "AMZNLINUXHVM": "ami-70edb016",
                "CENTOS7HVM": "ami-7abd0209",
                "US1604HVM": "ami-cac6e6b9"
            },
            "eu-west-2": {
                "AMZNLINUXHVM": "ami-f1949e95",
                "CENTOS7HVM": "ami-bb373ddf",
                "US1604HVM": "ami-e8e3e98c"
            },
            "sa-east-1": {
                "AMZNLINUXHVM": "ami-80086dec",
                "CENTOS7HVM": "ami-26b93b4a",
                "US1604HVM": "ami-687de504"
            },
            "us-east-1": {
                "AMZNLINUXHVM": "ami-0b33d91d",
                "CENTOS7HVM": "ami-6d1c2007",
                "US1604HVM": "ami-2c57433b"
            },
            "us-east-2": {
                "AMZNLINUXHVM": "ami-c55673a0",
                "CENTOS7HVM": "ami-6a2d760f",
                "US1604HVM": "ami-8ccd97e9"
            },
            "us-west-1": {
                "AMZNLINUXHVM": "ami-165a0876",
                "CENTOS7HVM": "ami-af4333cf",
                "US1604HVM": "ami-fe26779e"
            },
            "us-west-2": {
                "AMZNLINUXHVM": "ami-f173cc91",
                "CENTOS7HVM": "ami-d2c924b2",
                "US1604HVM": "ami-2709bd47"
            }
        },
        "ConfluentVersion2Vindex": {
            "3.2.0-SNAPSHOT": {
                "Vindex": "320"
            },
            "3.2.0": {
                "Vindex": "320"
            },
            "3.1.2": {
                "Vindex": "312"
            },
            "3.1.1": {
                "Vindex": "311"
            }
        },
        "LinuxAMINameMap": {
            "AmazonLinux-2016.09": {
                "Code": "AMZNLINUXHVM"
            },
            "CentOS-7.1": {
                "Code": "CENTOS7HVM"
            },
            "Ubuntu-16.04": {
                "Code": "US1604HVM"
            }
        },
        "Linux2BootDisk": {
            "AmazonLinux-2016.09": {
                "BootDisk": "/dev/xvda"
            },
            "CentOS-7.1": {
                "BootDisk": "/dev/sda1"
            },
            "Ubuntu-16.04": {
                "BootDisk": "/dev/sda1"
            }
        }
    },
    "Conditions": {
        "EphemeralStorage": {
            "Fn::Equals": [
                {
                    "Ref": "PersistentStorage"
                },
                "0"
            ]
        },
        "OnDemandInstances": {
            "Fn::Equals": [
                {
                    "Ref": "NodeSpotPrice"
                },
                "0.00"
            ]
        },
        "UseDefaultSG": {
            "Fn::Equals": [
                {
                    "Ref": "NodeSecurityGroup"
                },
                ""
            ]
        }
    },
    "Resources": {
        "NodesReadyHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "NodesReadyCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "Properties": {
                "Handle": {
                    "Ref": "NodesReadyHandle"
                },
                "Timeout": "2400",
                "Count": {
                    "Ref": "NumNodes"
                }
            }
        },
        "Nodes": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "VpcSubnetId"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "NodeLaunchConfig"
                },
                "MinSize": 0,
                "MaxSize": {
                    "Ref": "NumNodes"
                },
                "DesiredCapacity": {
                    "Ref": "NumNodes"
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {
                        "Ref": "NumNodes"
                    },
                    "Timeout": "PT30M"
                }
            }
        },
        "NodeLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "BlockDeviceMappings": {
                    "Fn::If": [
                        "EphemeralStorage",
                        [
                            {
                                "DeviceName": {
                                    "Fn::FindInMap": [
                                        "Linux2BootDisk",
                                        {
                                            "Ref": "LinuxOS"
                                        },
                                        "BootDisk"
                                    ]
                                },
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "BootDiskSize"
                                    },
                                    "DeleteOnTermination": "True"
                                }
                            },
                            {
                                "DeviceName": "/dev/sdb",
                                "VirtualName": "ephemeral0"
                            },
                            {
                                "DeviceName": "/dev/sdc",
                                "VirtualName": "ephemeral1"
                            },
                            {
                                "DeviceName": "/dev/sdd",
                                "VirtualName": "ephemeral2"
                            },
                            {
                                "DeviceName": "/dev/sde",
                                "VirtualName": "ephemeral3"
                            },
                            {
                                "DeviceName": "/dev/sdf",
                                "VirtualName": "ephemeral4"
                            },
                            {
                                "DeviceName": "/dev/sdg",
                                "VirtualName": "ephemeral5"
                            },
                            {
                                "DeviceName": "/dev/sdh",
                                "VirtualName": "ephemeral6"
                            },
                            {
                                "DeviceName": "/dev/sdi",
                                "VirtualName": "ephemeral7"
                            },
                            {
                                "DeviceName": "/dev/sdj",
                                "VirtualName": "ephemeral8"
                            },
                            {
                                "DeviceName": "/dev/sdk",
                                "VirtualName": "ephemeral9"
                            },
                            {
                                "DeviceName": "/dev/sdl",
                                "VirtualName": "ephemeral10"
                            },
                            {
                                "DeviceName": "/dev/sdm",
                                "VirtualName": "ephemeral11"
                            }
                        ],
                        [
                            {
                                "DeviceName": {
                                    "Fn::FindInMap": [
                                        "Linux2BootDisk",
                                        {
                                            "Ref": "LinuxOS"
                                        },
                                        "BootDisk"
                                    ]
                                },
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "BootDiskSize"
                                    },
                                    "DeleteOnTermination": "True"
                                }
                            },
                            {
                                "DeviceName": "/dev/sdb",
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "PersistentStorage"
                                    },
                                    "DeleteOnTermination": "True"
                                }
                            },
                            {
                                "DeviceName": "/dev/sdc",
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "PersistentStorage"
                                    },
                                    "DeleteOnTermination": "True"
                                }
                            },
                            {
                                "DeviceName": "/dev/sdd",
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "PersistentStorage"
                                    },
                                    "DeleteOnTermination": "True"
                                }
                            },
                            {
                                "DeviceName": "/dev/sde",
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "PersistentStorage"
                                    },
                                    "DeleteOnTermination": "True"
                                }
                            }
                        ]
                    ]
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "LinuxAMINameMap",
                                {
                                    "Ref": "LinuxOS"
                                },
                                "Code"
                            ]
                        }
                    ]
                },
                "SecurityGroups": [
                    {
                        "Fn::If": [
                            "UseDefaultSG",
                            {
                                "Ref": "AWS::NoValue"
                            },
                            {
                                "Ref": "NodeSecurityGroup"
                            }
                        ]
                    }
                ],
                "InstanceType": {
                    "Ref": "NodeType"
                },
                "SpotPrice": {
                    "Fn::If": [
                        "OnDemandInstances",
                        {
                            "Ref": "AWS::NoValue"
                        },
                        {
                            "Ref": "NodeSpotPrice"
                        }
                    ]
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "AssociatePublicIpAddress": "true",
                "IamInstanceProfile": {
                    "Ref": "InstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "\n",
                                "function error_exit\n",
                                "{\n",
                                " cfn-signal -e 1 --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " --resource Nodes\n",
                                " exit 1\n",
                                "}\n",
                                "\n",
                                "## Install core O/S packages\n",
                                "if [ ! -f /usr/bin/sshpass ] ; then \n",
                                "  [ `which yum` ] && yum install -y sshpass \n",
                                "  [ `which apt-get` ] && apt-get -y install sshpass \n",
                                "fi \n",
                                "\n",
                                "which pip &> /dev/null \n",
                                "if [ $? -ne 0 ] ; then \n",
                                "  [ `which yum` ] && yum install -y python-pip\n",
                                "  [ `which apt-get` ] && apt-get -y update && apt-get -y install python-pip\n",
                                "fi \n",
                                "pip install --upgrade pip\n",
                                "pip install awscli --ignore-installed six\n",
                                "\n",
                                "## Install and Update CloudFormation\n",
                                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                                "\n",
                                "## Signal that the node is up\n",
                                "cfn-signal -e 0 --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " --resource Nodes\n",
                                "\n",
                                "## Save off other cluster details in prep for configuration\n",
                                "echo ",
                                {
                                    "Ref": "ClusterName"
                                },
                                " > /tmp/clustername\n",
                                "echo ",
                                {
                                    "Ref": "ConfluentEdition"
                                },
                                " > /tmp/cedition\n",
                                "echo ",
                                {
                                    "Ref": "ConfluentSecurity"
                                },
                                " > /tmp/csecurity\n",
                                "[ \"",
                                {
                                    "Ref": "ConfluentSecurity"
                                },
                                "\" = 'Disabled' ] && rm /tmp/csecurity\n",
                                "echo ",
                                {
                                    "Ref": "ConfluentVersion"
                                },
                                " > /tmp/cversion\n",
                                "\n",
                                "## Retrieve scripts to deploy Confluent on the instances \n",
                                "CP_SCRIPTS_LOC=",
                                {
                                    "Ref": "ScriptsURL"
                                },
                                " \n",
                                "AMI_SBIN=/tmp/sbin \n",
                                "curl -f -s ${CP_SCRIPTS_LOC}/cp-retrieve-scripts.sh -o /tmp/cp-retrieve-scripts.sh \n",
                                "sh /tmp/cp-retrieve-scripts.sh $CP_SCRIPTS_LOC $AMI_SBIN\n",
                                "chmod a+x $AMI_SBIN/* \n",
                                "\n",
                                "## Prepare the instance \n",
                                "$AMI_SBIN/prep-cp-instance.sh \n",
                                ". $AMI_SBIN/prepare-disks.sh \n",
                                "\n",
                                "## Wait for all nodes to come on-line\n",
                                "$AMI_SBIN/wait-for-child-resource.sh ",
                                {
                                    "Ref": "ParentStackName"
                                },
                                " ZookeeperStack Nodes\n",
                                "$AMI_SBIN/wait-for-child-resource.sh ",
                                {
                                    "Ref": "ParentStackName"
                                },
                                " BrokerStack Nodes\n",
                                "$AMI_SBIN/wait-for-child-resource.sh ",
                                {
                                    "Ref": "ParentStackName"
                                },
                                " WorkerStack Nodes\n",
                                "\n",
                                "## Now find the private IP addresses of all deployed nodes\n",
                                "##   (generating /tmp/cphosts and /tmp/<role> files)\n",
                                "$AMI_SBIN/gen-cluster-hosts.sh ",
                                {
                                    "Ref": "ParentStackName"
                                },
                                "\n",
                                "\n",
                                "## Tag the instance (now that we're sure of launch index)\n",
                                "##   NOTE: as of Feb 2017, it appears that ami_launch_index is always correct)\n",
                                "instance_id=$(curl -f http://instance-data/latest/meta-data/instance-id)\n",
                                "ami_launch_index=$(curl -f http://instance-data/latest/meta-data/ami-launch-index)\n",
                                "launch_node=$(grep -w `hostname` /tmp/brokers | awk '{print $2}')\n",
                                "launch_index=${launch_node#*NODE}\n",
                                "if [ -n \"$instance_id\" ] ; then\n",
                                "  instance_tag=",
                                {
                                    "Ref": "ClusterName"
                                },
                                "-",
                                {
                                    "Ref": "NodeDesignation"
                                },
                                "-${ami_launch_index}\n",
                                "  aws ec2 create-tags",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " --resources $instance_id --tags Key=Name,Value=$instance_tag\n",
                                "fi\n",
                                "## Run the steps to install the software, \n",
                                "## then configure and start the services \n",
                                "$AMI_SBIN/cp-install.sh 2> /tmp/cp-install.err \n",
                                "$AMI_SBIN/cp-deploy.sh 2> /tmp/cp-deploy.err \n",
                                "\n",
                                "## [ OPTIONAL ] Open up ssh to allow direct login\n",
                                "#sed -i 's/ChallengeResponseAuthentication .*no$/ChallengeResponseAuthentication yes/' /etc/ssh/sshd_config\n",
                                "#service sshd restart\n",
                                "\n",
                                "## If all went well, signal success (must be done by ALL nodes in group)\n",
                                "cfn-signal -e 0 -r 'Confluent Platform broker deployment complete' '",
                                {
                                    "Ref": "NodesReadyHandle"
                                },
                                "'\n",
                                "\n",
                                "## Wait for all nodes to issue the signal\n",
                                "$AMI_SBIN/wait-for-resource.sh NodesReadyCondition \n",
                                "\n",
                                "## Signal back information for outputs (now that all nodes are up) \n",
                                "$AMI_SBIN/post-cp-info.sh '",
                                {
                                    "Ref": "ClusterInfoHandle"
                                },
                                "'\n",
                                "\n"
                            ]
                        ]
                    }
                }
            }
        }
    }
}
